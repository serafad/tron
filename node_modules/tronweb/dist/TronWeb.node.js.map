{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"injectpromise\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"ethers\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"semver\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"axios\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/paramValidator/index.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/event.js","webpack:///./src/lib/sidechain.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","toUtf8String","recoverAddress","SigningKey","AbiCoder","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","concat","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","a","btoa","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","decodeParams","names","types","ignoreMethodHash","type","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","isValidURL","url","validator","isURL","protocols","require_tld","isObject","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","properties","mapEvent","event","data","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","abi","inputs","padLeft","padding","amount","res","isNotNullOrUndefined","val","sleep","millis","Promise","resolve","setTimeout","code","accounts","crypto","ethersUtils","HttpProvider","host","timeout","user","headers","statusPage","instance","axios","baseURL","auth","request","then","payload","method","keys","params","self","Validator","tronWeb","param","msg","callback","Function","normalized","no","gt","lt","gte","lte","optional","se","isAddress","notPositive","notEqual","invalid","fromUtf8","resultManager","message","toUtf8","TransactionBuilder","injectPromise","injectpromise","to","from","defaultAddress","options","sendTrx","notValid","to_address","owner_address","permissionId","Permission_id","fullNode","err","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","undefined","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","entries","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","bytecode","parameters","entrys","payable","some","func","constructorParams","find","it","args","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","splice","_triggerSmartContract","_isConstant","triggerSmartContract","confirmed","contractAddress","functionSelector","assign","shieldedParameter","function_selector","ownerAddress","clearABI","trx","cache","contracts","brokerage","updateBrokerage","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","fullnodeSatisfies","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","account","getAccount","getAccountById","getAccountInfoById","getBalance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getBandwidth","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","nodes","port","start","end","startNum","endNum","getBlockRange","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","getContract","useTronHeader","verifyMessage","verifySignature","defaultPrivateKey","multisig","signatureHex","signString","fromPrivateKey","multiSign","getSignWeight","signWeight","foundKey","permission","approved_list","getApprovedList","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","proposal","getProposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","exchanges","listExchangesPaginated","getNodeInfo","info","getTokenListByName","getTokenByID","_getReward","_getBrokerage","reward","messageBytes","messageDigest","recovered","tronAddress","base58Address","fromHex","toHexString","signingKey","signDigest","getParamTypes","decodeOutput","filter","Method","outputs","getFunctionSelector","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","msg2","chunk","broadcast","error","checkResult","getTransactionInfo","resMessage","rawResponse","decoded","contractResult","keepTxID","eventServer","listener","lastBlock","since","getEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","events","latestEvent","newEvents","priorEvent","reject","bindListener","clearInterval","setInterval","stop","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","disablePlugins","pluginInterface","requires","components","libs","plugged","skipped","plugin","semver","satisfies","version","fullClass","className","classInstanceName","component","Event","healthcheck","providers","isValidProvider","isConnected","sinceTimestamp","size","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","querystring","response","getEventsByTransactionID","SideChain","sideOptions","mainchain","fullHost","mainGatewayAddress","sideGatewayAddress","sideChainId","sidechain","setMainGatewayAddress","setSideGatewayAddress","setChainId","chainId","chainIdByteArr","byteArr","byteArrHash","depositFee","depositTrx","contractInstance","depositTRX","depositTrc10","depositTRC10","fee","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","trxHash","mappingFee","mappingTrc","mappingTRC20","mappingTRC721","withdrawFee","withdrawTrx","withdrawTRX","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","injectFund","hexAddress","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee","eventHeaders","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","setFullNodeHeader","setEventHeader","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","setServer","currentProviders","prefix","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"injectpromise\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"ethers\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"semver\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"axios\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import { utils } from \"ethers\";\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst toUtf8String = utils.toUtf8String;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    toUtf8String,\n    recoverAddress,\n    SigningKey,\n    AbiCoder,\n};\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as ethersUtils from './ethersUtils';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    ethersUtils\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || this.tronWeb.feeLimit;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 5_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if (typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if (parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for (let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                else if (type == 'address[]')\n                    value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: this.tronWeb.feeLimit\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 5_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress)\n        };\n\n        if (functionSelector && utils.isString(functionSelector)) {\n            functionSelector = functionSelector.replace('/\\s*/g', '');\n            if (parameters.length) {\n                const abiCoder = new AbiCoder();\n                let types = [];\n                const values = [];\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let {type, value} = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type == 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type == 'address[]')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    // workaround for unsupported trcToken type\n                    types = types.map(type => {\n                        if (/trcToken/.test(type)) {\n                            type = type.replace(/trcToken/, 'uint256')\n                        }\n                        return type\n                    })\n\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n\n            if(options.shieldedParameter){\n                parameters = options.shieldedParameter.replace(/^(0x)/, '');\n            }\n\n            args.function_selector = functionSelector;\n            args.parameter = parameters;\n        }\n\n\n        if (!options._isConstant) {\n            args.call_value = parseInt(callValue)\n            args.fee_limit = parseInt(feeLimit)\n            if (utils.isNotNullOrUndefined(tokenValue))\n                args.call_token_value = parseInt(tokenValue)\n            if (utils.isNotNullOrUndefined(tokenId))\n                args.token_id = parseInt(tokenId)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision < 0 || precision > 6))\n            return callback('precision must be a positive integer >= 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (this.tronWeb.fullnodeSatisfies('>=3.5.0') && !(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== this.tronWeb.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const value ={\n            toHexString: function() {\n                return '0x' + privateKey\n            },\n            value: privateKey\n        }\n        const signingKey = new SigningKey(value);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({type}) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: this.tronWeb.feeLimit,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(ADDRESS_PREFIX_REGEX, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener,\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys ? contract.abi.entrys : [] : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.onlyConfirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.onlyUnconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import injectpromise from 'injectpromise';\nimport Validator from 'paramValidator';\n\nconst MAX_FEE_LIMIT = 5_000_000_000;\nexport default class SideChain {\n    constructor(sideOptions, TronWeb = false, mainchain = false, privateKey = false) {\n        this.mainchain = mainchain;\n        const { fullHost, fullNode, solidityNode, eventServer, mainGatewayAddress, sideGatewayAddress, sideChainId } = sideOptions;\n        this.sidechain = new TronWeb(fullHost || fullNode, fullHost || solidityNode, fullHost || eventServer, privateKey);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(this.sidechain);\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = this.sidechain.utils.ethersUtils.sha256(byteArr);\n\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address) foundKey = true;\n            });\n\n            if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                transaction.raw_data.contract[0].Permission_id = permissionId;\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n        // sign\n        try {\n            return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== this.sidechain.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    /**\n    * deposit asset to sidechain\n    */\n    async depositTrx(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0,\n                lte: MAX_FEE_LIMIT\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0,\n                lte: MAX_FEE_LIMIT\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0,\n                lte: MAX_FEE_LIMIT\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch (functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break;\n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0,\n                lte: MAX_FEE_LIMIT\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!this.utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport { version } from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport SideChain from 'lib/sidechain';\nimport { keccak256 } from 'utils/ethersUtils';\nimport { ADDRESS_PREFIX } from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nconst FEE_LIMIT = 150000000;\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n        // for retro-compatibility:\n        solidityNode = false, eventServer = false, sideOptions = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        let headers = false;\n        let eventHeaders = false;\n\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            sideOptions = solidityNode;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            headers = options.headers || false;\n            eventHeaders = options.eventHeaders || headers;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n        // for sidechain\n        if (typeof sideOptions === 'object' && (sideOptions.fullNode || sideOptions.fullHost)) {\n            this.sidechain = new SideChain(sideOptions, TronWeb, this, privateKey);\n        } else {\n            privateKey = privateKey || sideOptions;\n        }\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.feeLimit = FEE_LIMIT;\n        this.injectPromise = injectpromise(this);\n\n        if (headers) {\n            this.setFullNodeHeader(headers);\n        }\n\n        if (eventHeaders) {\n            this.setEventHeader(eventHeaders);\n        }\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    setHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n    }\n\n    setFullNodeHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n    }\n\n    setEventHeader (headers = {}) {\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n        this.setEventServer(eventServer);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if ((!isFinite(val)) || /^\\s*$/.test(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}